# do not edit this file
import os
import time

from colorama import init
from colorama import Fore
from colorama import Back
from colorama import Style


class Console:

    def __init__(self, primary_background_color=Back.BLACK, primary_foreground_color=Fore.GREEN, primary_style=Style.BRIGHT):
        
        self.circular_cursor = ['|', '/', '-', '\\']
        self.console_width = os.get_terminal_size()[0]
        self.padding = int(self.console_width * 0.15) # 15% of console width
        self.primary_background_color = primary_background_color
        self.primary_foreground_color = primary_foreground_color
        self.primary_style = primary_style
        self.circular_cursor_speed = 0.15
        
        os.name.lower() == "nt" and os.system("cls")
        os.name.lower() == "posix" and os.system("clear")

        init(autoreset=False, convert=None, strip=None, wrap=True)

        print(primary_background_color)
        print(primary_style)

    def print_horizontal_separator(self):
        print(self.primary_foreground_color + "=" * self.console_width)

    def print_moneycontrol_ascii_art(self):
        
        moneycontrol_ascii_art_part_1 = "█▀▄▀█ █▀▀█ █▀▀▄ █▀▀ █░░█ █▀▀ █▀▀█ █▀▀▄ ▀▀█▀▀ █▀▀█ █▀▀█ █░░ ░░ █▀▀▄ █░░"
        moneycontrol_ascii_art_part_2 = "█░▀░█ █░░█ █░░█ █▀▀ █▄▄█ █░░ █░░█ █░░█ ░░█░░ █▄▄▀ █░░█ █░░ ▀▀ █░░█ █░░"
        moneycontrol_ascii_art_part_3 = "▀░░░▀ ▀▀▀▀ ▀░░▀ ▀▀▀ ▄▄▄█ ▀▀▀ ▀▀▀▀ ▀░░▀ ░░▀░░ ▀░▀▀ ▀▀▀▀ ▀▀▀ ░░ ▀▀▀░ ▀▀▀"

        print(self.primary_foreground_color + '\n\n' +
            moneycontrol_ascii_art_part_1.center(self.console_width) + '\n' +
            moneycontrol_ascii_art_part_2.center(self.console_width) + '\n' +
            moneycontrol_ascii_art_part_3.center(self.console_width) + '\n' +
        '\n\n')

    def print_left_aligned(self, msg, end='\n'):
        left_padding = int(self.padding / 2)
        print(self.primary_foreground_color + " " * left_padding + msg, end=end)

    def print_centre_aligned(self, msg, end='\n'):
        msg = msg.center(self.console_width)
        print(self.primary_foreground_color + msg, end=end)

    def print_right_aligned(self, msg, end="\n"):
        left_padding = self.console_width - int(self.padding / 2) - len(msg)
        print(self.primary_foreground_color + " " * left_padding + msg, end=end)

    def print(self, msg, msg_type, end="\n"):

        display_string = f"{ msg.capitalize() } { '.' * (self.console_width - self.padding - len(msg) - 8) } [ xx ]".center(self.console_width)

        if msg_type == "PROGRESS":

            i = 0
            n = len(msg)
            self.show_circular_cursor_animation = True

            while self.show_circular_cursor_animation:
                
                # special case
                caps_i = i % n
                msg = msg.capitalize()
                msg = (msg[:caps_i] + msg[caps_i:caps_i + 2].upper() + msg[caps_i + 2:])
                display_string = f"{ msg } { '.' * (self.console_width - self.padding - len(msg) - 8) } [ xx ]".center(self.console_width)

                print(Fore.YELLOW + display_string.replace("[ xx ]", f"[ {self.circular_cursor[i % 4]}{self.circular_cursor[i % 4]} ]"), end=end)
               
                i += 1
                time.sleep(self.circular_cursor_speed)
        
        if msg_type == "SUCCESS":
            print(Fore.GREEN + display_string.replace("[ xx ]", "[ ok ]"), end=end)

        if msg_type == "INFO":
            print(Fore.YELLOW + display_string.replace("[ xx ]", "[ !i ]"), end=end)

        if msg_type == "ERROR":
            print(Fore.RED + display_string.replace("[ xx ]", "[ er ]"), end=end)

    def print_exit_message(self):
        print("\n\n")
        print(Fore.LIGHTMAGENTA_EX + "* * * press enter to exit * * *".center(self.console_width))
        print("\n\n")

    def print_table(self, table):
        lines = table.to_string(index=False).split("\n")
        n = len(lines)
        m = len(lines[0])

        print('\n')
        for i in range(n):
            line = lines[i]

            if i == 0:
                x = m - 10

                index = "%5s" % "INDEX"
                name = line[:x - 1].upper()
                price = line[x:]
                row = index + " | " + name + " | " + price

                print(Fore.CYAN + ("+" + '-' * (len(line) + 12) + "+").center(self.console_width))
                print(Fore.CYAN + ("| " + row + " |").center(self.console_width))
                print(Fore.CYAN + ("+" + '-' * (len(line) + 12) + "+").center(self.console_width))

            else:
                index = "%5s" % str(i)
                name = line[:x - 1].lower().capitalize()
                price = line[x:]
                row = index + " | " + name + " | " + price

                if i == n - 1:
                    if n % 2 == 0:
                        print(Fore.CYAN + ("| " + row + " |").center(self.console_width))
                        print(Fore.CYAN + ("+" + '-' * (len(line) + 12) + "+").center(self.console_width))
                    else:
                        print(Fore.CYAN + ("| " + row + " |").center(self.console_width))
                        print(Fore.CYAN + ("+" + '-' * (len(line) + 12) + "+").center(self.console_width))

                else:
                    if n % 2 == 0:
                        print(Fore.CYAN + ("| " + row + " |").center(self.console_width))
                        print(Fore.CYAN + ("|" + '-' * (len(line) + 12) + "|").center(self.console_width))
                    else:
                        print(Fore.CYAN + ("| " + row + " |").center(self.console_width))
                        print(Fore.CYAN + ("|" + '-' * (len(line) + 12) + "|").center(self.console_width))
                i += 1
        print("\n")
